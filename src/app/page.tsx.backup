"use client";

import { useEffect, useRef, useState } from 'react';
import AboutSection from '@/components/sections/AboutSection';
import ExperienceSection from '@/components/sections/ExperienceSection';
import ProjectsSection from '@/components/sections/ProjectsSection';
import BlogSection from '@/components/sections/BlogSection';
import EducationSection from '@/components/sections/EducationSection';
import LoadingScreen from '@/components/LoadingScreen';

// Add a debounce utility at the top of the file, after imports
const debounce = (func: Function, wait: number) => {
  let timeout: NodeJS.Timeout | null = null;
  return function executedFunction(...args: any[]) {
    const later = () => {
      timeout = null;
      func(...args);
    };
    if (timeout) {
      clearTimeout(timeout);
    }
    timeout = setTimeout(later, wait);
  };
};

// Section reference component for direct navigation
const SectionReference = ({ id, title, onSectionClick }: { id: string; title: string; onSectionClick: (id: string) => void }) => {
  // Direct scroll function within the component
  const handleClick = (e: React.MouseEvent) => {
    e.preventDefault();
    onSectionClick(id);
  };

  return (
    <a 
      href={`#${id}`}
      onClick={handleClick}
      className="text-green hover:text-lightest-slate transition-colors duration-200 ml-2"
      title={`Direct link to ${title} section`}
    >
      {/* Removed hover link icon */}
    </a>
  );
};

export default function Home() {
  const [activeSection, setActiveSection] = useState('about');
  const [isMobile, setIsMobile] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const rightColumnRef = useRef<HTMLDivElement>(null);
  const aboutRef = useRef<HTMLDivElement>(null);
  const experienceRef = useRef<HTMLDivElement>(null);
  const projectsRef = useRef<HTMLDivElement>(null);
  const educationRef = useRef<HTMLDivElement>(null);
  const blogRef = useRef<HTMLDivElement>(null);
  
  // Track whether we need to process scroll events
  const isScrollingRef = useRef(false);
  const scrollTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const observerRef = useRef<IntersectionObserver | null>(null);

  // Map of section IDs to their corresponding refs
  const sectionRefs = {
    'about': aboutRef,
    'experience': experienceRef,
    'projects': projectsRef,
    'education': educationRef,
    'blog': blogRef
  };

  // Simplified, lightweight smooth scroll function
  const smoothScrollTo = (element: HTMLElement) => {
    if (!element || !rightColumnRef.current) return;
    
    // Temporarily disable scroll handling during programmatic scrolling
    isScrollingRef.current = true;
    
    // Use minimal calculation for better performance
    const offset = 40;
    const top = element.offsetTop - offset;
    
    // Simple, direct scrolling
    rightColumnRef.current.scrollTo({
      top,
      behavior: 'smooth'
    });
    
    // Re-enable scroll handling after animation completes
    if (scrollTimeoutRef.current) {
      clearTimeout(scrollTimeoutRef.current);
    }
    scrollTimeoutRef.current = setTimeout(() => {
      isScrollingRef.current = false;
    }, 500); // Increased timeout for smoother transitions
  };

  // Function to scroll to a specific section - minimal processing
  const scrollToSection = (sectionId: string) => {
    const ref = sectionRefs[sectionId as keyof typeof sectionRefs];
    
    if (ref?.current && rightColumnRef.current) {
      // Update active section immediately for responsive UI
      setActiveSection(sectionId);
      
      // Call the scroll function
      smoothScrollTo(ref.current);
      
      // Update URL quietly without triggering scroll events
      history.replaceState(null, '', `#${sectionId}`);
      
      // Add a class to trigger animation and remove it after animation completes
      const navLinks = document.querySelectorAll('.navlink');
      navLinks.forEach(link => {
        if (link.getAttribute('href') === `#${sectionId}`) {
          // Add animation trigger class
          link.classList.add('animate-on-scroll');
          
          // Remove it after animation completes
          setTimeout(() => {
            link.classList.remove('animate-on-scroll');
          }, 1000); // slightly longer than animation duration
        }
      });
    }
  };

  // Modify the IntersectionObserver setup to reduce toggling
  useEffect(() => {
    if (isLoading || typeof IntersectionObserver === 'undefined') return;
    
    // Clean up any existing observer
    if (observerRef.current) {
      observerRef.current.disconnect();
    }
    
    // Create options for the observer with larger thresholds and margins
    const options = {
      root: rightColumnRef.current,
      rootMargin: '-15% 0px -15% 0px', // Increased margin to reduce sensitivity
      threshold: [0.2, 0.4, 0.6, 0.8] // Higher thresholds for more stable detection
    };
    
    // Track which sections are in view with their visibility ratios
    const visibleSections = new Map();
    let lastActiveSection = activeSection;
    let debounceTimer: NodeJS.Timeout | null = null;
    
    console.log("Setting up IntersectionObserver with refs:", Object.keys(sectionRefs).map(id => 
      `${id}: ${sectionRefs[id as keyof typeof sectionRefs]?.current ? 'exists' : 'missing'}`
    ));
    
    // Create new observer with debounced section changes
    observerRef.current = new IntersectionObserver((entries) => {
      if (isScrollingRef.current) return; // Skip during programmatic scrolling
      
      // Update which sections are visible with their intersection ratios
      entries.forEach(entry => {
        const sectionId = entry.target.id;
        
        if (entry.isIntersecting) {
          // Store intersection ratio for visible sections
          visibleSections.set(sectionId, entry.intersectionRatio);
        } else {
          visibleSections.delete(sectionId);
        }
      });
      
      // If we have visible sections, find the one with highest visibility ratio
      if (visibleSections.size > 0) {
        // Apply a minimum threshold to prevent flickering
        const VISIBILITY_THRESHOLD = 0.3;
        let highestRatio = 0;
        let mostVisibleSection = lastActiveSection;
        
        visibleSections.forEach((ratio, sectionId) => {
          // Only consider sections with significant visibility
          if (ratio > highestRatio && ratio >= VISIBILITY_THRESHOLD) {
            highestRatio = ratio;
            mostVisibleSection = sectionId;
          }
        });
        
        // Debounce the section change to prevent rapid toggling
        if (mostVisibleSection !== lastActiveSection && mostVisibleSection !== activeSection) {
          // Clear any existing debounce timer
          if (debounceTimer) {
            clearTimeout(debounceTimer);
          }
          
          // Set a timer to update the section only if it remains the most visible
          debounceTimer = setTimeout(() => {
            // Double check if this is still the most visible section
            if (mostVisibleSection === getMostVisibleSection(visibleSections)) {
              console.log("Changing active section from", activeSection, "to", mostVisibleSection);
              setActiveSection(mostVisibleSection);
              lastActiveSection = mostVisibleSection;
              
              // Update URL hash without triggering scroll
              if (!isScrollingRef.current) {
                history.replaceState(null, '', `#${mostVisibleSection}`);
              }
              
              // Add animation to the newly active section
              const navLinks = document.querySelectorAll('.navlink');
              navLinks.forEach(link => {
                if (link.getAttribute('href') === `#${mostVisibleSection}`) {
                  // Remove active animation from all links first
                  navLinks.forEach(l => l.classList.remove('animate-on-scroll'));
                  
                  // Add animation trigger class
                  link.classList.add('animate-on-scroll');
                  
                  // Remove it after animation completes
                  setTimeout(() => {
                    link.classList.remove('animate-on-scroll');
                  }, 1000);
                }
              });
            }
          }, 250); // 250ms debounce to ensure stability
        }
      }
    }, options);
    
    // Helper function to get most visible section
    const getMostVisibleSection = (visibleSections: Map<string, number>) => {
      let highestRatio = 0;
      let mostVisibleSection = activeSection;
      
      visibleSections.forEach((ratio, sectionId) => {
        if (ratio > highestRatio) {
          highestRatio = ratio;
          mostVisibleSection = sectionId;
        }
      });
      
      return mostVisibleSection;
    };
    
    // Observe all section elements
    Object.entries(sectionRefs).forEach(([id, ref]) => {
      if (ref.current) {
        console.log(`Observing section: ${id}`);
        observerRef.current?.observe(ref.current);
      } else {
        console.warn(`Section ref for "${id}" not available`);
      }
    });
    
    console.log("IntersectionObserver setup complete");
    
    // Cleanup function
    return () => {
      if (observerRef.current) {
        observerRef.current.disconnect();
        console.log("IntersectionObserver disconnected");
      }
      if (debounceTimer) {
        clearTimeout(debounceTimer);
      }
    };
  }, [isLoading, activeSection]); // Re-initialize when loading state changes

  // Handle screen size changes
  useEffect(() => {
    const checkScreenSize = () => {
      const newIsMobile = window.innerWidth < 800;
      setIsMobile(newIsMobile);
      console.log("Screen width:", window.innerWidth, "isMobile:", newIsMobile);
    };
    
    // Check on initial render
    checkScreenSize();
    
    // Add event listener for window resize
    window.addEventListener('resize', checkScreenSize);
    
    // Cleanup
    return () => {
      window.removeEventListener('resize', checkScreenSize);
    };
  }, []);

  // Handle initial hash scrolling and hash changes
  useEffect(() => {
    if (isLoading || typeof window === 'undefined') return;
    
    // First render: check for hash in URL
    if (window.location.hash) {
      const hash = window.location.hash.substring(1);
      if (hash && Object.keys(sectionRefs).includes(hash)) {
        // Delay to ensure the DOM is fully ready
        setTimeout(() => {
          scrollToSection(hash);
        }, 700); // Increased delay for more reliable scrolling
      }
    }
    
    // Add event listener for hash changes
    const handleHashChange = () => {
      const hash = window.location.hash.substring(1);
      if (hash && Object.keys(sectionRefs).includes(hash)) {
        scrollToSection(hash);
      }
    };
    
    window.addEventListener('hashchange', handleHashChange);
    
    return () => {
      window.removeEventListener('hashchange', handleHashChange);
    };
  }, [isLoading]);

  // Initialize click handlers for navigation
  useEffect(() => {
    if (!isLoading && rightColumnRef.current) {
      // Add a clean event listener for smooth scroll on all navigation links
      document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', (e: Event) => {
          e.preventDefault();
          const target = e.currentTarget as HTMLAnchorElement;
          const targetId = target.getAttribute('href')?.substring(1);
          if (targetId && Object.keys(sectionRefs).includes(targetId)) {
            scrollToSection(targetId);
          }
        });
      });
    }
  }, [isLoading]);

  // Handle initial loading
  useEffect(() => {
    // Simulate a minimum loading time to ensure the animation completes
    const timer = setTimeout(() => {
      setIsLoading(false);
    }, 1500);

    return () => clearTimeout(timer);
  }, []);

  // Debug useEffect to check if refs are properly initialized
  useEffect(() => {
    // Wait a bit to ensure DOM is rendered
    const timeoutId = setTimeout(() => {
      if (rightColumnRef.current) {
        // Add a clean event listener for smooth scroll on all navigation links
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
          anchor.addEventListener('click', (e: Event) => {
            e.preventDefault();
            const target = e.currentTarget as HTMLAnchorElement;
            const targetId = target.getAttribute('href')?.substring(1);
            if (targetId && Object.keys(sectionRefs).includes(targetId)) {
              scrollToSection(targetId);
            }
          });
        });
      }
    }, 500);
    
    return () => clearTimeout(timeoutId);
  }, []);

  // Function to update active section based on scroll position (fallback method)
  const updateActiveSection = () => {
    if (!rightColumnRef.current || isScrollingRef.current) return;
    
    const scrollPos = rightColumnRef.current.scrollTop;
    const viewportHeight = rightColumnRef.current.clientHeight;
    const scrollBottom = scrollPos + viewportHeight;
    
    // Get all section positions
    const sections = [
      { id: 'about', top: aboutRef.current?.offsetTop || 0 },
      { id: 'experience', top: experienceRef.current?.offsetTop || 0 },
      { id: 'projects', top: projectsRef.current?.offsetTop || 0 },
      { id: 'blog', top: blogRef.current?.offsetTop || 0 },
      { id: 'education', top: educationRef.current?.offsetTop || 0 }
    ];
    
    console.log("Scroll position:", scrollPos, "ViewportHeight:", viewportHeight);
    console.log("Section positions:", sections.map(s => `${s.id}: ${s.top}`).join(', '));
    
    // Sort sections by position to ensure correct order
    sections.sort((a, b) => a.top - b.top);
    
    // Find the section that's currently in view
    let current = sections[0].id; // Default to first section
    
    // Check which section is most visible
    for (let i = 0; i < sections.length; i++) {
      const section = sections[i];
      const nextSection = sections[i + 1];
      
      // If this is the last section or we're before the next section's top
      if (!nextSection || scrollPos < nextSection.top - viewportHeight * 0.25) {
        if (scrollPos >= section.top - viewportHeight * 0.25) {
          current = section.id;
          break;
        }
      }
    }
    
    console.log("Detected section by scroll:", current);
    
    // Update active section if different
    if (current !== activeSection) {
      setActiveSection(current);
      // Update URL hash without triggering scroll
      history.replaceState(null, '', `#${current}`);
    }
  };

  // Add a fallback scroll handler for browsers without Intersection Observer
  useEffect(() => {
    if (isLoading) return;
    
    // Add scroll event listener as fallback
    const handleScroll = () => {
      // Use requestAnimationFrame to throttle scroll events
      requestAnimationFrame(updateActiveSection);
    };
    
    if (rightColumnRef.current) {
      rightColumnRef.current.addEventListener('scroll', handleScroll);
      
      // Initial check
      setTimeout(updateActiveSection, 500);
    }
    
    return () => {
      if (rightColumnRef.current) {
        rightColumnRef.current.removeEventListener('scroll', handleScroll);
      }
    };
  }, [isLoading, activeSection]);

  // Return loading screen while content is preparing
  if (isLoading) {
    return <LoadingScreen />;
  }

  // Return main content once loading is complete
  return (
    <div className="bg-slate-900 min-h-screen py-12 md:py-20 lg:py-24 relative overflow-hidden" style={{ paddingTop: '1rem', paddingBottom: '1.5rem', fontFeatureSettings: "'ss01', 'ss02', 'cv01', 'cv02'" }}>
      {/* Background Spotlight Effects */}
      <div className="absolute top-0 left-0 w-full h-full overflow-hidden -z-10">
        {/* Base gradient overlay */}
        <div className="absolute inset-0 bg-gradient-to-b from-slate-900 via-slate-900/95 to-indigo-950/30 opacity-80" />
        
        {/* Static gradient elements instead of motion effects */}
        <div 
          className="absolute w-[150vw] h-[100vh] bg-gradient-to-b from-transparent via-green/30 to-transparent skew-y-12 rotate-12"
          style={{ top: '-50%', left: '-50%', opacity: 0.1 }}
        />
        
        <div 
          className="absolute w-[60vw] h-[60vh] bg-gradient-to-r from-green/30 to-emerald-400/20 rounded-full blur-[100px] opacity-70"
          style={{ top: '5%', left: '10%' }}
        />
        
        <div 
          className="absolute w-[70vw] h-[70vh] bg-gradient-to-br from-indigo-500/30 via-violet-500/25 to-purple-800/20 rounded-full blur-[120px] opacity-60"
          style={{ bottom: '-10%', right: '0%' }}
        />
        
        <div 
          className="absolute w-[40vw] h-[40vh] bg-gradient-to-tl from-blue-500/25 to-cyan-300/20 rounded-full blur-[80px] opacity-50"
          style={{ top: '60%', left: '40%' }}
        />
        
        <div 
          className="absolute w-[35vw] h-[35vh] bg-gradient-to-tr from-rose-500/20 to-pink-400/15 rounded-full blur-[90px] opacity-40"
          style={{ top: '30%', right: '10%' }}
        />
      </div>
      
      {isMobile ? (
        // Mobile View
        <div className="block p-4 sm:p-6 md:p-8" style={{ fontSize: 'small' }}>
          <header className="text-left mb-6 pt-6 sm:pt-8 relative p-3 rounded-lg" style={{ marginLeft: '1rem' }}>
          <div 
            className="absolute inset-0 bg-gradient-to-br from-green/5 via-slate-800/80 to-slate-900 rounded-lg -z-10"
          />
          <h1 
            className="font-bold text-lightest-slate mb-2 tracking-tight"
            style={{ fontSize: 'xxx-large' }}
          >
            Lokesh Para
          </h1>
          
          <div
            className="flex items-center gap-1 mb-4"
          >
            <p 
              className="font-bold text-lightest-slate mb-2 tracking-tight"
              style={{ fontSize: 'medium' }}
            >
              Full Stack Developer
            </p>
          </div>
          
          <p 
            className="text-light-slate opacity-70 font-light tracking-wide mb-8"
            style={{ fontSize: 'small' }}
          >
            Building digital experiences that matter
          </p>
          
            <div className="social-container mobile-social" style={{ marginBottom: '3rem' }}>
              <a 
                href="https://github.com" 
                target="_blank"
                rel="noopener noreferrer"
                className="social-link"
                aria-label="GitHub Profile"
              >
                <svg className="social-icon" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
                </svg>
              </a>
              
              <a 
                href="https://linkedin.com" 
                target="_blank"
                rel="noopener noreferrer"
                className="social-link"
                aria-label="LinkedIn Profile"
              >
                <svg className="social-icon" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"/>
                </svg>
              </a>
              
              <a 
                href="https://twitter.com" 
                target="_blank"
                rel="noopener noreferrer"
                className="social-link"
                aria-label="Twitter Profile"
              >
                <svg className="social-icon" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z"/>
                </svg>
              </a>
              
              <a 
                href="mailto:john@doe.com"
                className="email-link"
                data-email="john@doe.com"
                aria-label="Email Me"
              >
                <svg className="email-icon" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M12 12.713l-11.985-9.713h23.97l-11.985 9.713zm0 2.574l-12-9.725v15.438h24v-15.438l-12 9.725z"/>
                </svg>
              </a>
            </div>
        </header>
        
        <main style={{ fontSize: 'small' }}>
            <div id="about" style={{ scrollMarginTop: '1rem', minHeight: '30vh' }}>
          <AboutSection />
            </div>
            <div id="experience" style={{ scrollMarginTop: '1rem', minHeight: '30vh' }}>
          <ExperienceSection />
            </div>
            <div id="projects" style={{ scrollMarginTop: '1rem', minHeight: '30vh' }}>
          <ProjectsSection />
            </div>
            <div id="blog" style={{ scrollMarginTop: '1rem', minHeight: '30vh' }}>
          <BlogSection />
            </div>
            <div id="education" style={{ scrollMarginTop: '1rem', minHeight: '30vh', paddingBottom: '2rem' }}>
              <EducationSection />
            </div>
      </main>
      </div>
      ) : (
        // Desktop View - Use a Fragment to contain both columns
        <>
          {/* Fixed Left Column */}
          <div className="fixed top-0 left-0 h-screen w-[calc(min(90vw,1000px)*0.4)] max-w-[400px] z-10" style={{ 
            marginLeft: 'calc((100vw - min(90vw, 1000px))/2)',
            top: '2rem'
          }}>
            <div className="flex flex-col h-full px-3 md:px-4 lg:px-5 xl:px-6">
              {/* Profile section - reduce margin */}
              <div className="relative mb-4" style={{ marginTop: '2rem' }}>
                <div className="absolute inset-0 bg-gradient-to-br from-green/5 via-slate-800/80 to-slate-900 rounded-lg -z-10"/>
                <div className="p-3">
                  <div className="flex items-start">
                    <div>
                      <h1 className="font-bold text-lightest-slate mb-2 tracking-tight" style={{ fontSize: 'xxx-large' }}>
                        Lokesh Para
                      </h1>
                      <div className="flex items-center gap-1 mb-4">
                        <p className="text-green font-bold font-mono tracking-tight" style={{ fontSize: 'large' }}>
                          Full Stack Developer
                        </p>
                      </div>
                      <p className="text-light-slate opacity-70 font-light tracking-wide mb-8" style={{ fontSize: 'small' }}>
                        Building digital experiences that matter
                      </p>
                    </div>
                  </div>
                </div>
              </div>
              
              {/* Desktop Navigation */}
                <nav className="mb-6 pl-1" style={{ opacity: 1 }}>
                <ul className="flex flex-col" style={{ opacity: 1 }}>
                  <li className="navlink-container" style={{ opacity: 1 }}>
                    <a 
                      href="#about"
                      className={`navlink ${activeSection === 'about' ? 'navlink-active' : ''}`}
                      onClick={(e) => {
                        e.preventDefault();
                        scrollToSection('about');
                      }}
                      style={{ opacity: 1 }}
                    >
                        <div className="navlink-indicator"></div>
                        <span className="navlink-text">
                          <span data-letter="A">A</span>
                          <span data-letter="b">b</span>
                          <span data-letter="o">o</span>
                          <span data-letter="u">u</span>
                          <span data-letter="t">t</span>
                        </span>
                    </a>
                  </li>
                  <li className="navlink-container" style={{ opacity: 1 }}>
                    <a 
                      href="#experience"
                      className={`navlink ${activeSection === 'experience' ? 'navlink-active' : ''}`}
                      onClick={(e) => {
                        e.preventDefault();
                        scrollToSection('experience');
                      }}
                      style={{ opacity: 1 }}
                    >
                        <div className="navlink-indicator"></div>
                        <span className="navlink-text">
                          <span data-letter="E">E</span>
                          <span data-letter="x">x</span>
                          <span data-letter="p">p</span>
                          <span data-letter="e">e</span>
                          <span data-letter="r">r</span>
                          <span data-letter="i">i</span>
                          <span data-letter="e">e</span>
                          <span data-letter="n">n</span>
                          <span data-letter="c">c</span>
                          <span data-letter="e">e</span>
                        </span>
                    </a>
                  </li>
                  <li className="navlink-container" style={{ opacity: 1 }}>
                    <a 
                      href="#projects"
                      className={`navlink ${activeSection === 'projects' ? 'navlink-active' : ''}`}
                      onClick={(e) => {
                        e.preventDefault();
                        scrollToSection('projects');
                      }}
                      style={{ opacity: 1 }}
                    >
                        <div className="navlink-indicator"></div>
                        <span className="navlink-text">
                          <span data-letter="P">P</span>
                          <span data-letter="r">r</span>
                          <span data-letter="o">o</span>
                          <span data-letter="j">j</span>
                          <span data-letter="e">e</span>
                          <span data-letter="c">c</span>
                          <span data-letter="t">t</span>
                          <span data-letter="s">s</span>
                        </span>
                    </a>
                  </li>
                  <li className="navlink-container" style={{ opacity: 1 }}>
                    <a 
                      href="#blog"
                      className={`navlink ${activeSection === 'blog' ? 'navlink-active' : ''}`}
                      onClick={(e) => {
                        e.preventDefault();
                        scrollToSection('blog');
                      }}
                      style={{ opacity: 1 }}
                    >
                        <div className="navlink-indicator"></div>
                        <span className="navlink-text">
                          <span data-letter="B">B</span>
                          <span data-letter="l">l</span>
                          <span data-letter="o">o</span>
                          <span data-letter="g">g</span>
                        </span>
                    </a>
                  </li>
                  <li className="navlink-container" style={{ opacity: 1 }}>
                    <a 
                      href="#education"
                      className={`navlink ${activeSection === 'education' ? 'navlink-active' : ''}`}
                      onClick={(e) => {
                        e.preventDefault();
                        scrollToSection('education');
                      }}
                      style={{ opacity: 1 }}
                    >
                        <div className="navlink-indicator"></div>
                        <span className="navlink-text">
                          <span data-letter="E">E</span>
                          <span data-letter="d">d</span>
                          <span data-letter="u">u</span>
                          <span data-letter="c">c</span>
                          <span data-letter="a">a</span>
                          <span data-letter="t">t</span>
                          <span data-letter="i">i</span>
                          <span data-letter="o">o</span>
                          <span data-letter="n">n</span>
                        </span>
                    </a>
                  </li>
                </ul>
              </nav>
              
              {/* Social links with icons instead of text */}
              <div className="mt-4 mb-6" style={{ opacity: 1 }}>
                <div className="social-container" style={{ opacity: 1 }}>
                  <a 
                    href="https://github.com" 
                    target="_blank"
                    rel="noopener noreferrer"
                    className="social-link"
                    aria-label="GitHub Profile"
                    style={{ opacity: 1 }}
                  >
                    <svg className="social-icon" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="currentColor" style={{ opacity: 1 }}>
                      <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
                    </svg>
                  </a>
                  
                  <a 
                    href="https://linkedin.com" 
                    target="_blank"
                    rel="noopener noreferrer"
                    className="social-link"
                    aria-label="LinkedIn Profile"
                    style={{ opacity: 1 }}
                  >
                    <svg className="social-icon" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="currentColor" style={{ opacity: 1 }}>
                      <path d="M19 0h-14c-2.761 0-5 2.239-5 5v14c0 2.761 2.239 5 5 5h14c2.762 0 5-2.239 5-5v-14c0-2.761-2.238-5-5-5zm-11 19h-3v-11h3v11zm-1.5-12.268c-.966 0-1.75-.79-1.75-1.764s.784-1.764 1.75-1.764 1.75.79 1.75 1.764-.783 1.764-1.75 1.764zm13.5 12.268h-3v-5.604c0-3.368-4-3.113-4 0v5.604h-3v-11h3v1.765c1.396-2.586 7-2.777 7 2.476v6.759z"/>
                    </svg>
                  </a>
                  
                  <a 
                    href="https://twitter.com" 
                    target="_blank"
                    rel="noopener noreferrer"
                    className="social-link"
                    aria-label="Twitter Profile"
                    style={{ opacity: 1 }}
                  >
                    <svg className="social-icon" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="currentColor" style={{ opacity: 1 }}>
                      <path d="M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z"/>
                    </svg>
                  </a>
                  
                  <a 
                    href="mailto:john@doe.com" 
                    className="email-link"
                    data-email="john@doe.com"
                    aria-label="Email Me"
                    style={{ opacity: 1 }}
                  >
                    <svg className="email-icon" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                      <path d="M12 12.713l-11.985-9.713h23.97l-11.985 9.713zm0 2.574l-12-9.725v15.438h24v-15.438l-12 9.725z"/>
                    </svg>
                  </a>
                </div>
              </div>
            </div>
          </div>

          {/* Scrollable Right Column */}
          <div 
            ref={rightColumnRef} 
            className="h-screen overflow-y-auto pt-0"
            style={{
              scrollbarWidth: 'none',
              msOverflowStyle: 'none',
              WebkitOverflowScrolling: 'touch',
              scrollBehavior: 'smooth',
              willChange: 'scroll-position',
              transform: 'translateZ(0)',
              backfaceVisibility: 'hidden',
              marginLeft: 'calc(min(90vw,1000px)*0.48)',
              width: 'calc(100% - calc(min(90vw,1000px)*0.48))'
            }}
          >
            <style jsx global>{`
              @media (min-width: 800px) {
                .lg\\:block {
                  display: block;
                }
                .lg\\:hidden {
                  display: none;
                }
              }
              @media (max-width: 799px) {
                .hidden.lg\\:block {
                  display: none;
                }
                .block.lg\\:hidden {
                  display: block;
                }
              }
              
              /* Hide scrollbars */
              ::-webkit-scrollbar {
                display: none;
              }
              
              /* List style reset for navigation */
              nav ul {
                list-style: none;
                padding: 0;
                margin: 0;
              }
              
              /* Mobile list style reset */
              .mobile-social {
                list-style: none;
                padding: 0;
                margin: 0;
              }
              
              /* Better section positioning with lightweight approach */
              .section-container {
                position: relative;
                padding-top: 20px;
                scroll-margin-top: 20px;
              }
              
              /* Optimize rendering during scrolling */
              @media (prefers-reduced-motion: no-preference) {
                .scroll-container {
                  scroll-behavior: smooth;
                }
              }
              
              /* Remove all animations that affect initial render */
              .navlink-container {
                opacity: 1 !important;
                animation: none !important;
                transform: none !important;
              }
              
              .social-container {
                display: flex;
                gap: 18px;
                margin-bottom: 16px;
                opacity: 1 !important;
              }
              
              .social-link,
              .email-link,
              .navlink,
              .navlink-icon,
              .navlink-text,
              .resume-btn,
              .mobile-social {
                opacity: 1 !important;
                animation: none !important;
              }
              
              /* Remove all animation delays */
              .navlink-container:nth-child(1),
              .navlink-container:nth-child(2),
              .navlink-container:nth-child(3),
              .navlink-container:nth-child(4),
              .navlink-container:nth-child(5),
              .social-link:nth-child(1),
              .social-link:nth-child(2),
              .social-link:nth-child(3) {
                animation-delay: 0s !important;
              }
              
              /* Mobile styles */
              .mobile-social {
                margin-top: 1rem;
                margin-bottom: 0;
                opacity: 1 !important;
              }
              
                  /* Navlink container with minimal gap */
              .navlink-container {
                opacity: 1;
                    margin-bottom: 2px; /* Very tight spacing between nav items */
              }
              
                  /* Clean modern navlink style */
              .navlink {
                position: relative;
                display: flex;
                align-items: center;
                    padding: 3px 0; /* Minimal padding */
                opacity: 1;
                color: #8892b0;
                    font-size: 13px;
                    transition: all 0.2s ease;
                    text-decoration: none;
              }
              
              .navlink:hover {
                color: #64ffda;
              }
              
                  /* Text styling with modern rollback animation */
                  .navlink-text {
                position: relative;
                    font-weight: 400;
                    letter-spacing: 0.3px;
                    font-size: 13px;
                    color: #8892b0;
                    display: inline-block;
                    margin-left: 10px; /* Space after the line */
                  }
                  
                  /* Define keyframes for continuous rotation */
                  @keyframes continuousRollback {
                    0% { transform: rotateX(0deg); }
                    100% { transform: rotateX(360deg); }
                  }
                  
                  /* Define keyframes for one-time rotation */
                  @keyframes oneTimeRollback {
                    0% { transform: rotateX(0deg); }
                    100% { transform: rotateX(360deg); }
                  }
                  
                  /* Enhanced 3D letter animation */
                  .navlink-text span {
                    display: inline-block;
                    position: relative;
                    transition: color 0.2s ease;
                    transform-style: preserve-3d;
                    perspective: 800px;
                  }
                  
                  /* Continuous rollback animation on hover */
                  .navlink:hover .navlink-text span {
                    color: #64ffda;
                    animation-name: continuousRollback;
                    animation-duration: 1s;
                    animation-timing-function: cubic-bezier(0.34, 1.56, 0.64, 1);
                    animation-iteration-count: infinite;
                    animation-fill-mode: forwards;
                  }
                  
                  /* Different timing for each letter to create wave effect */
                  .navlink:hover .navlink-text span:nth-child(1) { animation-delay: 0.00s; }
                  .navlink:hover .navlink-text span:nth-child(2) { animation-delay: 0.05s; }
                  .navlink:hover .navlink-text span:nth-child(3) { animation-delay: 0.10s; }
                  .navlink:hover .navlink-text span:nth-child(4) { animation-delay: 0.15s; }
                  .navlink:hover .navlink-text span:nth-child(5) { animation-delay: 0.20s; }
                  .navlink:hover .navlink-text span:nth-child(6) { animation-delay: 0.25s; }
                  .navlink:hover .navlink-text span:nth-child(7) { animation-delay: 0.30s; }
                  .navlink:hover .navlink-text span:nth-child(8) { animation-delay: 0.35s; }
                  .navlink:hover .navlink-text span:nth-child(9) { animation-delay: 0.40s; }
                  .navlink:hover .navlink-text span:nth-child(10) { animation-delay: 0.45s; }
                  
                  /* One-time animation for active state */
                  .navlink-active .navlink-text span {
                    color: #64ffda;
                    font-weight: 500;
                    animation-name: oneTimeRollback;
                    animation-duration: 0.8s;
                    animation-timing-function: cubic-bezier(0.34, 1.56, 0.64, 1);
                    animation-iteration-count: 1;
                    animation-fill-mode: forwards;
                  }
                  
                  /* Different timing for active state animation */
                  .navlink-active .navlink-text span:nth-child(1) { animation-delay: 0.00s; }
                  .navlink-active .navlink-text span:nth-child(2) { animation-delay: 0.04s; }
                  .navlink-active .navlink-text span:nth-child(3) { animation-delay: 0.08s; }
                  .navlink-active .navlink-text span:nth-child(4) { animation-delay: 0.12s; }
                  .navlink-active .navlink-text span:nth-child(5) { animation-delay: 0.16s; }
                  .navlink-active .navlink-text span:nth-child(6) { animation-delay: 0.20s; }
                  .navlink-active .navlink-text span:nth-child(7) { animation-delay: 0.24s; }
                  .navlink-active .navlink-text span:nth-child(8) { animation-delay: 0.28s; }
                  .navlink-active .navlink-text span:nth-child(9) { animation-delay: 0.32s; }
                  .navlink-active .navlink-text span:nth-child(10) { animation-delay: 0.36s; }
                  
                  /* Handle animation end gracefully when mouse leaves */
                  .navlink-text span {
                    animation-play-state: paused;
                  }
                  
                  .navlink:hover .navlink-text span {
                    animation-play-state: running;
                  }
                  
                  /* Line indicator before text */
                  .navlink-indicator {
                    position: relative;
                    height: 1px;
                    width: 40px;
                    background: transparent;
                  }
                  
                  /* Line before text - actual line element */
                  .navlink-indicator::before {
                    content: '';
                    position: absolute;
                    height: 1px;
                    width: 0;
                    background: #8892b0;
                    left: 0;
                    top: 50%;
                    transform: translateY(-50%);
                    opacity: 0.7;
                    transition: width 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
                  }
                  
                  /* Short line on normal state */
                  .navlink .navlink-indicator::before {
                    width: 15px;
                  }
                  
                  /* Line extends on hover/active */
                  .navlink:hover .navlink-indicator::before,
                  .navlink-active .navlink-indicator::before {
                    width: 40px;
                    background: #64ffda;
                    opacity: 1;
                  }
                  
                  /* Active indicator is always visible */
                  .navlink-active .navlink-indicator::before {
                    width: 40px;
                  }
                  
                  /* Clean up old styles */
                  .navlink-dots,
                  .navlink-indicator::after {
                    display: none;
                  }
                  
                  /* Compact nav styling */
                  nav {
                    margin-bottom: 4px;
              }
              
              /* Social media icons animation */
              .social-container {
                display: flex;
                gap: 18px;
                margin-bottom: 16px;
                opacity: 1 !important;
              }
              
              .social-link {
                position: relative;
                display: flex;
                align-items: center;
                justify-content: center;
                width: 40px;
                height: 40px;
                border-radius: 50%;
                background: rgba(100, 255, 218, 0.05);
                color: #8892b0;
                transition: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
                overflow: hidden;
              }
              
              /* Icon inner styling */
              .social-icon {
                position: relative;
                z-index: 2;
                transition: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
              }
              
              /* Background animation */
              .social-link::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: #64ffda;
                transform: scale(0);
                transition: transform 0.5s cubic-bezier(0.34, 1.56, 0.64, 1);
                border-radius: 50%;
                z-index: 1;
              }
              
              /* Hover effects */
              .social-link:hover {
                transform: translateY(-5px);
                box-shadow: 0 10px 20px -10px rgba(100, 255, 218, 0.5);
              }
              
              .social-link:hover::before {
                transform: scale(1);
              }
              
              .social-link:hover .social-icon {
                color: #0a192f;
                transform: rotate(360deg) scale(1.1);
              }
              
              /* Email icon styling */
              .email-link {
                position: relative;
                display: flex;
                align-items: center;
                justify-content: center;
                width: 40px;
                height: 40px;
                border-radius: 50%;
                background: rgba(100, 255, 218, 0.05);
                color: #8892b0;
                margin-left: 8px;
                transition: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
                overflow: hidden;
              }
              
              /* Email tooltip */
              .email-link::after {
                content: attr(data-email);
                position: absolute;
                top: -40px;
                left: 50%;
                transform: translateX(-50%) translateY(10px);
                background: #0a192f;
                color: #64ffda;
                padding: 4px 10px;
                border-radius: 4px;
                font-size: 12px;
                white-space: nowrap;
                opacity: 0;
                transition: all 0.3s ease;
                pointer-events: none;
                box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
                border: 1px solid rgba(100, 255, 218, 0.2);
              }
              
              .email-link:hover::after {
                opacity: 1;
                transform: translateX(-50%) translateY(0);
              }
              
              /* Same hover effects as social */
              .email-link:hover {
                transform: translateY(-5px);
                box-shadow: 0 10px 20px -10px rgba(100, 255, 218, 0.5);
              }
              
              .email-link::before {
                content: '';
                position: absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: #64ffda;
                transform: scale(0);
                transition: transform 0.5s cubic-bezier(0.34, 1.56, 0.64, 1);
                border-radius: 50%;
                z-index: 1;
              }
              
              .email-link:hover::before {
                transform: scale(1);
              }
              
              .email-link .email-icon {
                position: relative;
                z-index: 2;
                transition: all 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
              }
              
              .email-link:hover .email-icon {
                color: #0a192f;
                transform: rotate(360deg) scale(1.1);
              }
              
              /* Mobile social icons */
              .mobile-social .social-link,
              .mobile-social .email-link {
                width: 36px;
                height: 36px;
              }
              
              .mobile-email {
                display: none;
              }
              
              @media (max-width: 799px) {
                .mobile-social {
                  display: flex;
                  gap: 15px;
                  margin-top: 1rem;
                  margin-bottom: 0;
                }
              }
              
              /* Add subtle pulse animation to icons */
              @keyframes subtlePulse {
                0% { transform: scale(1); }
                50% { transform: scale(1.05); }
                100% { transform: scale(1); }
              }
              
              .social-icon, .email-icon {
                animation: subtlePulse 3s infinite ease-in-out;
              }
              
              .social-link:nth-child(1) .social-icon,
              .email-link .email-icon {
                animation-delay: 0s;
              }
              
              .social-link:nth-child(2) .social-icon {
                animation-delay: 0.5s;
              }
              
              .social-link:nth-child(3) .social-icon {
                animation-delay: 1s;
              }
            `}</style>
            
            {/* Content container */}
            <div className="mx-auto" style={{ 
              width: '85%',
              maxWidth: '670px',
              paddingRight: '1rem',
              paddingLeft: '1rem',
              marginTop: '1.5rem', 
              marginBottom: '1rem',
              overflow: 'hidden'
            }}>
              <div 
                className="bg-slate-900/50 rounded-lg shadow-lg backdrop-blur-sm"
              >
                <div className="px-6 py-12">
                  <section ref={aboutRef} id="about" className="right-column-section mb-24 section-container">
                    <div className="flex items-center mb-4">
                      <h2 className="text-xl font-semibold text-lightest-slate hidden">About</h2>
                      <SectionReference id="about" title="About" onSectionClick={scrollToSection} />
                    </div>
                    <AboutSection />
                  </section>
                  
                      <section 
                        ref={experienceRef} 
                        id="experience" 
                        className="right-column-section mb-24 section-container"
                        style={{ minHeight: '50vh', scrollMarginTop: '5rem' }}
                      >
                    <div className="flex items-center mb-4">
                      <h2 className="text-xl font-semibold text-lightest-slate hidden">Experience</h2>
                      <SectionReference id="experience" title="Experience" onSectionClick={scrollToSection} />
                    </div>
                    <ExperienceSection />
                  </section>
                  
                      <section 
                        ref={projectsRef} 
                        id="projects" 
                        className="right-column-section mb-24 section-container"
                        style={{ minHeight: '50vh', scrollMarginTop: '5rem' }}
                      >
                    <div className="flex items-center mb-4">
                      <h2 className="text-xl font-semibold text-lightest-slate hidden">Projects</h2>
                      <SectionReference id="projects" title="Projects" onSectionClick={scrollToSection} />
                    </div>
                    <ProjectsSection />
                  </section>
                  
                      <section 
                        ref={blogRef} 
                        id="blog" 
                        className="right-column-section mb-24 section-container"
                        style={{ minHeight: '50vh', scrollMarginTop: '5rem' }}
                      >
                    <div className="flex items-center mb-4">
                      <h2 className="text-xl font-semibold text-lightest-slate hidden">Blog</h2>
                      <SectionReference id="blog" title="Blog" onSectionClick={scrollToSection} />
                    </div>
                    <BlogSection />
                  </section>
                  
                      <section 
                        ref={educationRef} 
                        id="education" 
                        className="right-column-section section-container"
                        style={{ minHeight: '50vh', scrollMarginTop: '5rem', paddingBottom: '5rem' }}
                      >
                    <div className="flex items-center mb-4">
                      <h2 className="text-xl font-semibold text-lightest-slate hidden">Education</h2>
                      <SectionReference id="education" title="Education" onSectionClick={scrollToSection} />
                    </div>
                    <EducationSection />
                  </section>
                </div>
              </div>
            </div>
          </div>
        </>
      )}
    </div>
  );
}
